extends layout

mixin ability-row(full_name, short_name)
  tr
    td.right 
      label.right(for='#{short_name}') #{full_name}
    td
      input.input-mini(id='#{short_name}',class='basespinner',type='number',name='#{short_name}',placeholder='base',ng-model="user.stats.#{short_name}",ng-change="setStatTotal('#{short_name}')")
    td
      input.input-mini(id='#{short_name}-racial',class='modspinner',type='number',name='#{short_name}-racial',placeholder=0,ng-model="user.statsRacial.#{short_name}",ng-change="setStatTotal('#{short_name}')")
    td
      span(id='#{short_name}-enhance') 0
    td
      span(id='#{short_name}-other') 0
    td
      span(id='#{short_name}-total',class='badge badge-inverse') {{user.statsTotal.#{short_name}}}
    td
      span(class='#{short_name}-mod badge') {{user.statsModifier.#{short_name}}}
      

block content

  div.row-fluid(ng-controller="userController")
    div.span12
      h3 Core abilities

    div.row-fluid
      div.span2
        label.right(for='user_id') Name
      div.span10
        input#user_id(type='text',name='id',placeholder='Pick a unique name',value='#{id}')
  
    div.row-fluid
      div.span2
        label.right(for='alignment') Alignment
      div.span10
        select#alignments(name='alignments',ng-model='user.alignment',ng-options='alignment.id as alignment.name for alignment in alignments')
      
    div.span12
      h3 Ability Scores

      div.row-fluid
        div.span6
          table.table.table-condensed
            thead
              tr
                th
                th Base
                th Racial
                th Enhance
                th Other
                th Total
                th Modifier
            tbody
              mixin ability-row('Strength', 'str')
              mixin ability-row('Dexterity', 'dex')
              mixin ability-row('Constitution', 'con')
              mixin ability-row('Intelligence', 'int')
              mixin ability-row('Wisdom', 'wis')
              mixin ability-row('Charisma', 'cha')
    
          

block script

  script.
    var modifiers = function(score){
      if (score >= 10){ return Math.floor((score-10)/2); }
      else { return Math.ceil((score-10)/2); }
    }

    var spinconfig_stats = {minimum:0, maximum:30, step:1, numberOfDecimals:0};

    $(function() {
      // jquery onstart code here

    });

    var app = angular.module("pfcombat", ["firebase"]);
    
    // Note: minification safe controller
    app.controller('userController', ['$scope', '$http', 'angularFire', 
      function($scope, $http, angularFire) {
        var ref = new Firebase("https://pfcombat.firebaseio.com/users/#{id}");
        $http.get('/alignments/').success(function(data) {
          $scope.alignments = data;
        });
        $scope.user = {};
        angularFire(ref, $scope, 'user');
        //$scope.alignment = $scope.user.alignment;
        
        $scope.setStatTotal = function(statName) {
          if (!$scope.user.stats) { $scope.user.stats = { str:10,dex:10,con:10,int:10,wis:10,cha:10 }; }
          if (!$scope.user.statsRacial) { $scope.user.statsRacial = { str:0,dex:0,con:0,int:0,wis:0,cha:0 }; }
          if (!$scope.user.statsTotal) { $scope.user.statsTotal = { str:0,dex:0,con:0,int:0,wis:0,cha:0 }; }
          if (!$scope.user.statsModifier) { $scope.user.statsModifier = { str:0,dex:0,con:0,int:0,wis:0,cha:0 }; }
          $scope.user.statsTotal[statName] = parseInt($scope.user.stats[statName]) + parseInt($scope.user.statsRacial[statName]);
          $scope.user.statsModifier[statName] = modifiers($scope.user.statsTotal[statName]);
        }
      }]
    );
    
    
